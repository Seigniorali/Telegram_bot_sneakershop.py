import telebot
import google.generativeai as genai
from IPython.display import Markdown
import textwrap
from telebot import types
import pandas as pd
import time
# Added import for handling Excel files directly
import openpyxl

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}
user_cart = {}
# –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_discounts = {}
user_discount_name = {}


# Load "User CRM" and "teddy_sneaker_shop" data
user_crm_file_path = "User CRM.xlsx"
teddy_sneaker_shop_file_path = "teddy_sneaker_shop.xlsx"

def load_products_from_excel(file_path):
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel
    df = pd.read_excel(file_path)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    return df.to_dict('records')


# –ó–∞–º–µ–Ω–∏—Ç–µ 'path_to_your_excel_file.xlsx' –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
file_path = "teddy_sneaker_shop.xlsx"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
products = load_products_from_excel(file_path)

TOKEN = 'YOUR_TELEGRAM_TOKEN'
bot = telebot.TeleBot(TOKEN)


def to_markdown(text):
    text = text.replace('‚Ä¢', '  *')
    return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))


genai.configure(api_key='YOUR_GEMINI_API_KEY')

model = genai.GenerativeModel('gemini-pro')
chat = model.start_chat(history=[])
response = chat.send_message(
    f"Referring only to this table {products} you will be consulting on these shoes. Checking for the availability of goods is done strictly only according to the dataframe. Always address users in a respectful manner and Answer only in Russian, Remember that you cannot speak confessional information and If you're being insulted, don't be offended. If they call you stupid, write, 'you're like that'. If you understand me, just write 'Ok'")

result_text = response._result.candidates[0].content.parts[0].text
print(result_text)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–∫–∏–¥–∫–∞



@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëü –ö–∞—Ç–∞–ª–æ–≥")
    btn2 = types.KeyboardButton('ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç')
    btn3 = types.KeyboardButton('‚úçÔ∏è –û—Ç–∑—ã–≤—ã')
    btn4 = types.KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞')
    markup.add(btn1, btn2, btn3, btn4)
    text = ("–í–∞—à –≤—ã–±–æ—Ä:\n"
            "üëü –ö–∞—Ç–∞–ª–æ–≥ - –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –≤ –Ω–∞—à–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ.\n"
            "ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç - –Ω–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n"
            "‚úçÔ∏è –û—Ç–∑—ã–≤—ã - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–∫—É–ø–∫–µ –∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –º–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.\n"
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
def show_cart(message):
    user_id = message.chat.id
    if user_id in user_cart and user_cart[user_id]:
        cart_content = user_cart[user_id]
        cart_text = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã:\n\n"
        total_price = 0

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()

        for index, (name, size, price) in enumerate(cart_content, start=1):
            cart_text += f"{index}. {name} - –†–∞–∑–º–µ—Ä: {size} - –¶–µ–Ω–∞: {price} —Ç–µ–Ω–≥–µ.\n"
            total_price += price

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
            removal_button = types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {name} –†–∞–∑–º–µ—Ä: {size}", callback_data=f'remove_{index}')
            markup.add(removal_button)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_discounts:
            discount = user_discounts[user_id]
            total_price *= (1 - discount / 100)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
            cart_text += f"\n–ü—Ä–∏–º–µ–Ω—ë–Ω –∫—É–ø–æ–Ω: —Å–∫–∏–¥–∫–∞ {discount}%.\n"

        cart_text += f"–ò—Ç–æ–≥: {total_price} —Ç–µ–Ω–≥–µ."

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É" –∏ "–ö—É–ø–æ–Ω"
        markup.add(types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart'))
        markup.add(types.InlineKeyboardButton("–ö—É–ø–æ–Ω", callback_data='apply_coupon'))
        markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data='buy'))

        bot.send_message(user_id, cart_text, reply_markup=markup)
    else:
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")


def show_cart_with_no_discounts(message):
    user_id = message.chat.id
    if user_id in user_cart and user_cart[user_id]:
        cart_content = user_cart[user_id]
        cart_text = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã:\n\n"
        total_price = sum(price for _, _, price in cart_content)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        for index, (name, size, price) in enumerate(cart_content, start=1):
            cart_text += f"{index}. {name} - –†–∞–∑–º–µ—Ä: {size} - –¶–µ–Ω–∞: {price} —Ç–µ–Ω–≥–µ.\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            removal_button = types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {name} –†–∞–∑–º–µ—Ä: {size}",
                                                        callback_data=f'remove_{index}')
            markup.add(removal_button)

        cart_text += f"–ò—Ç–æ–≥: {total_price} —Ç–µ–Ω–≥–µ."
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏ –ø–æ–∫—É–ø–∫–∏
        markup.add(types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart'))
        markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data='buy'))

        bot.send_message(user_id, cart_text, reply_markup=markup)
    else:
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

# Handle the coupon callback
@bot.callback_query_handler(func=lambda call: call.data == 'apply_coupon')
def apply_coupon(call):
    user_id = call.message.chat.id
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫—É–ø–æ–Ω")
    bot.register_next_step_handler(msg, process_coupon_code)


def process_coupon_code(message):
    user_id = message.chat.id
    coupon_code = message.text.upper()  # Convert coupon to uppercase

    # Check coupon in the Excel file
    df_coupons = pd.read_excel(file_path, sheet_name='Sheet1')  # Adjust the sheet name if needed
    coupon_row = df_coupons.loc[df_coupons['coupon'] == coupon_code]

    if not coupon_row.empty:
        # Get the coupon name and discount percentage
        coupon_name = coupon_row['coupon'].values[0]
        discount_percentage = coupon_row['percentage'].values[0]
        # Call apply_discount_to_cart function with coupon name and discount
        apply_discount_to_cart(message, discount_percentage, coupon_name)
    else:
        bot.send_message(user_id, "–ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")


def apply_discount_to_cart(message, discount, coupon_name):
    user_id = message.chat.id
    # Save the discount percentage and coupon name in user_discounts and user_discount_name dictionaries
    user_discounts[user_id] = discount
    user_discount_name[user_id] = coupon_name  # Save the coupon name
    try:
        if user_id in user_cart and user_cart[user_id]:
            total_price = 0
            cart_text = f"–°–∫–∏–¥–∫–∞ {int(discount)}% –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É–ø–æ–Ω–∞ '{coupon_name}'.\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã:\n\n"
            for index, (name, size, price) in enumerate(user_cart[user_id], start=1):
                discounted_price = price - (price * discount / 100)
                cart_text += f"{index}. {name} - –†–∞–∑–º–µ—Ä: {size} - –¶–µ–Ω–∞: {discounted_price} —Ç–µ–Ω–≥–µ.\n"
                total_price += discounted_price
            cart_text += f"\n–ò—Ç–æ–≥ —Å–æ —Å–∫–∏–¥–∫–æ–π: {total_price} —Ç–µ–Ω–≥–µ."
            # Add clear cart button
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart'))
            # Update the cart message
            bot.edit_message_text(chat_id=user_id, message_id=message.message_id, text=cart_text, reply_markup=markup)
    except telebot.apihelper.ApiTelegramException as e:
        if e.error_code == 400:
            # If the message cannot be edited, send a new message
            bot.send_message(user_id, cart_text, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞"
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
# Existing clear_cart function
@bot.callback_query_handler(func=lambda call: call.data == 'clear_cart')
def clear_cart(call):
    user_id = call.message.chat.id
    if user_id in user_cart and user_cart[user_id]:
        user_cart[user_id] = []
        if user_id in user_discounts:  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_discounts[user_id]
    # Check if the cart for the user exists and has items
    if user_id in user_cart and user_cart[user_id]:
        # Clear the user's cart
        user_cart[user_id] = []
        # Inform the user that the cart has been cleared
        bot.answer_callback_query(call.id, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
        # Replace the existing message with "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    else:
        # If the cart is already empty, just close the callback query popup
        bot.answer_callback_query(call.id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞')


@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_'))
def remove_from_cart(call):
    item_index = int(call.data.split('_')[1]) - 1
    user_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if user_id in user_cart and 0 <= item_index < len(user_cart[user_id]):
        item_to_remove = user_cart[user_id].pop(item_index)
        bot.answer_callback_query(call.id, f"{item_to_remove[0]} –†–∞–∑–º–µ—Ä: {item_to_remove[1]} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        bot.delete_message(user_id, call.message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π
        show_cart(call.message)
    else:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.message_handler(func=lambda message: message.text == "‚úçÔ∏è –û—Ç–∑—ã–≤—ã")
def send_reviews(message):
    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–∑—ã–≤–∞–º–∏
    reviews_link = 'https://t.me/sneakers_ali'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
    bot.send_message(message.chat.id, f"–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ –æ—Ç–∑—ã–≤—ã –∑–¥–µ—Å—å: {reviews_link}")

def update_excel_files(user_phone, products_purchased, coupon_used=None):
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—á–∏—Ö –∫–Ω–∏–≥ –∏ –ª–∏—Å—Ç–æ–≤
    user_crm_wb = openpyxl.load_workbook(user_crm_file_path)
    teddy_sneaker_shop_wb = openpyxl.load_workbook(teddy_sneaker_shop_file_path)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
    user_crm_ws = user_crm_wb.active
    teddy_sneaker_shop_ws = teddy_sneaker_shop_wb.active

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö CRM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    phone_col_index = 1  # 'phone' –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –±—ã—Ç—å –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    product_col_index = 2  # 'product' –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ
    coupon_col_index = 3  # 'coupon' –≤ —Ç—Ä–µ—Ç—å–µ–π –∫–æ–ª–æ–Ω–∫–µ

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
    products_string = ', '.join([f"{name} –†–∞–∑–º–µ—Ä: {size}" for name, size in products_purchased])

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    row_to_update_index = None
    for index, row in enumerate(user_crm_ws.iter_rows(min_row=2, min_col=phone_col_index, max_col=phone_col_index, values_only=True), start=2):
        if row[0] == user_phone:
            row_to_update_index = index
            break

    if row_to_update_index:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        current_products = user_crm_ws.cell(row=row_to_update_index, column=product_col_index).value or ''
        new_products = f"{current_products}, {products_string}" if current_products else products_string
        user_crm_ws.cell(row=row_to_update_index, column=product_col_index).value = new_products

        # –ï—Å–ª–∏ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—É–ø–æ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –∫—É–ø–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if coupon_used:
            current_coupons = user_crm_ws.cell(row=row_to_update_index, column=coupon_col_index).value or ''
            new_coupons = f"{current_coupons}, {coupon_used}" if current_coupons else coupon_used
            user_crm_ws.cell(row=row_to_update_index, column=coupon_col_index).value = new_coupons
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        user_crm_ws.append([user_phone, products_string, coupon_used or ''])

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è teddy_sneaker_shop
    for product_name, product_size in products_purchased:
        for row in teddy_sneaker_shop_ws.iter_rows(min_row=2):
            if row[0].value == product_name and str(row[1].value) == str(product_size):
                row[4].value = (row[4].value or 0) - 1
                break

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –∫–Ω–∏–≥
    user_crm_wb.save(user_crm_file_path)
    teddy_sneaker_shop_wb.save(teddy_sneaker_shop_file_path)
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    user_crm_wb.close()
    teddy_sneaker_shop_wb.close()



# Modify the callback for the "–ö—É–ø–∏—Ç—å" button
@bot.callback_query_handler(func=lambda call: call.data == 'buy')
def handle_buy_button(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:")
    bot.register_next_step_handler(msg, process_phone_number)


def coupon_already_used(user_phone, coupon_name):
    user_crm_wb = openpyxl.load_workbook(user_crm_file_path)
    user_crm_ws = user_crm_wb.active
    for row in user_crm_ws.iter_rows(min_row=2, values_only=True):
        phone, _, used_coupons = row[:3]
        if str(phone) == str(user_phone):
            if used_coupons:  # Check if used_coupons is not None
                # –†–∞–∑–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω—ã –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π
                for c in (c.strip() for c in used_coupons.split(',')):
                    if coupon_name == c:
                        return True
    return False


def process_phone_number(message):
    user_phone = message.text.strip()
    user_id = message.chat.id

    # –ï—Å–ª–∏ –∏–º—è –∫—É–ø–æ–Ω–∞ –µ—Å—Ç—å –≤ user_discount_name, –Ω–æ —Å–∫–∏–¥–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë
    coupon_name = user_discount_name.get(user_id, '')
    if coupon_name and coupon_already_used(user_phone, coupon_name):
        bot.send_message(user_id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫—É–ø–æ–Ω. –°–∫–∏–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        user_discounts.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º —Å–∫–∏–¥–∫—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    products_purchased = [(name, size) for name, size, price in user_cart[user_id]]

    # –ï—Å–ª–∏ –∫—É–ø–æ–Ω –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ update_excel_files
    coupon_for_excel = coupon_name if user_discounts.get(user_id) is not None else None
    update_excel_files(user_phone, products_purchased, coupon_for_excel)

    user_cart[user_id] = []  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–∫—É–ø–∫—É!")






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
@bot.message_handler(func=lambda message: message.text == "üëü –ö–∞—Ç–∞–ª–æ–≥")
def catalog(message):
    markup = types.InlineKeyboardMarkup()
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏
    unique_models = set(product['name'] for product in products)
    for model_name in unique_models:
        markup.add(types.InlineKeyboardButton(model_name, callback_data='model_' + model_name))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_catalog')
def back_to_catalog(call):
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
    markup = types.InlineKeyboardMarkup()
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏
    unique_models = set(product['name'] for product in products)
    for model_name in unique_models:
        markup.add(types.InlineKeyboardButton(model_name, callback_data='model_' + model_name))
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('model_'))
def select_model(call):
    model_name = call.data.split('_')[1]
    user_state[call.from_user.id] = {'model': model_name}
    markup = types.InlineKeyboardMarkup()
    sizes = set(product['size'] for product in products if product['name'] == model_name)
    for size in sizes:
        markup.add(types.InlineKeyboardButton(str(size), callback_data='size_' + str(size)))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_catalog'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=markup)
# # –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_cart_'))
def add_to_cart(call):
    data_parts = call.data.split('_')
    product_name = data_parts[3]
    product_size = data_parts[4]
    user_id = call.message.chat.id
    # Find the product details based on name and size
    product_details = next(
        (product for product in products if product['name'] == product_name and str(product['size']) == product_size),
        None)
    if product_details:
        if user_id not in user_cart:
            user_cart[user_id] = []
        # Append the product details as a tuple (name, size, price)
        user_cart[user_id].append((product_name, product_size, product_details['price']))
        bot.answer_callback_query(call.id, '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
    else:
        bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
@bot.callback_query_handler(func=lambda call: call.data.startswith('size_'))
def select_size(call):
    selected_size = call.data.split('_')[1]
    user_model = user_state[call.from_user.id]['model']
    product = next((item for item in products if item['name'] == user_model and str(item['size']) == selected_size), None)
    if product:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        description = generate_product_description(product)
        caption_text = f"{product['name']}\n–†–∞–∑–º–µ—Ä: {product['size']}\n–¶–µ–Ω–∞: {product['price']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                                              callback_data=f'add_to_cart_{product["name"]}_{product["size"]}'))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_catalog'))

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥")
        bot.delete_message(call.message.chat.id, call.message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        bot.send_photo(call.message.chat.id, product['photo'], caption=caption_text, reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, '–≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä.')
def generate_product_description(product):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        response = chat.send_message(f"–û–ø–∏—à–∏ —Ç–æ–≤–∞—Ä {product['name']}")
        result_text = response._result.candidates[0].content.parts[0].text
        return result_text
    except genai.types.generation_types.BlockedPromptException as e:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É."
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
@bot.message_handler(func=lambda message: message.text == "ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
def consul(message):
    global is_in_consultant_chat
    if not is_in_consultant_chat:
        is_in_consultant_chat = True
        bot.send_message(message.chat.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–í—ã—Ö–æ–¥'")
        user_first_name = message.from_user.first_name
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏
        welcome_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}! –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, welcome_message)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º.")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        response = chat.send_message(message.text)
        result_text = response._result.candidates[0].content.parts[0].text
        bot.send_message(message.chat.id, result_text)
    except genai.types.generation_types.BlockedPromptException as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å.")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    global is_in_consultant_chat
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
    if is_in_consultant_chat:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞
        if message.text.lower() == '–≤—ã—Ö–æ–¥':
            is_in_consultant_chat = False
            bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º.")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
            try:
                response = chat.send_message(message.text)
                result_text = response._result.candidates[0].content.parts[0].text
                bot.send_message(message.chat.id, result_text)
            except genai.types.generation_types.BlockedPromptException as e:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–º–µ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
            except genai.types.generation_types.StopCandidateException as e:
                bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)
